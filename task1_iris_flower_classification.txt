# -*- coding: utf-8 -*-
"""iris classification using ml

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dltkAZnLq4P-P8lHHdBLBnqgs0XVk-2c
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

import seaborn as sns
sns.set(style='white', color_codes=True)

iris = pd.read_csv('/content/archive (1).zip')

iris.head()

iris.tail()

iris

iris.describe()

iris.plot(kind='scatter', x='SepalLengthCm', y='SepalWidthCm')

sns.boxplot(x='Species',y='PetalLengthCm', data=iris)

ax = sns.boxplot(x='Species',y='PetalLengthCm', data=iris)

ax = sns.stripplot(x ='Species', y ='PetalLengthCm', data = iris, jitter =True, edgecolor ='blue')

sns.violinplot(x='Species', y='PetalLengthCm', data=iris, size=5)

sns.pairplot(iris.drop('Id', axis=1), hue='Species', size=6)

iris.drop('Id', axis=1).boxplot(by='Species', figsize=(12, 6))

from pandas.plotting import andrews_curves
andrews_curves(iris.drop('Id', axis=1), 'Species');

from pandas.plotting import parallel_coordinates
parallel_coordinates(iris.drop('Id', axis=1), 'Species');

from pandas.plotting import radviz
radviz(iris.drop('Id', axis=1), 'Species')

from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report
from sklearn.model_selection import train_test_split

x = iris.iloc[:, :-1].values
y = iris.iloc[:, -1].values
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 0)

from sklearn.linear_model import LogisticRegression
classification = LogisticRegression()
classification.fit(x_train, y_train)

y_pred = classification.predict(x_test)

print(classification_report(y_test, y_pred))
print(confusion_matrix(y_test, y_pred))
from sklearn.metrics import accuracy_score
print('accuracy is',accuracy_score(y_pred,y_test))

from sklearn.neighbors import KNeighborsClassifier

classifier = KNeighborsClassifier(n_neighbors=8)
classifier.fit(x_train, y_train)

y_pred = classifier.predict(x_test)
print(classification_report(y_test, y_pred))
print(confusion_matrix(y_test, y_pred))
from sklearn.metrics import accuracy_score
print('accuracy is',accuracy_score(y_pred, y_test))

from sklearn.svm import SVC

classifier = SVC()
classifier.fit(x_train, y_train)

y_pred = classifier.predict(x_test)
print(classification_report(y_test, y_pred))
print(confusion_matrix(y_test, y_pred))
from sklearn.metrics import accuracy_score
print('accuracy is',accuracy_score(y_pred,y_test))

from sklearn.tree import DecisionTreeClassifier
classifier = DecisionTreeClassifier()
classifier.fit(x_train, y_train)

y_pred = classifier.predict(x_test)
print(classification_report(y_test, y_pred))
print(confusion_matrix(y_test, y_pred))
from sklearn.metrics import accuracy_score
print('accuracy is',accuracy_score(y_pred,y_test))

from sklearn.naive_bayes import MultinomialNB
classifier = MultinomialNB()
classifier.fit(x_train, y_train)

y_pred = classifier.predict(x_test)

print(classification_report(y_test, y_pred))
print(confusion_matrix(y_test, y_pred))
from sklearn.metrics import accuracy_score
print('accuracy is',accuracy_score(y_pred, y_test))

from sklearn.naive_bayes import BernoulliNB
classifier = BernoulliNB()
classifier.fit(x_train, y_train)

y_pred = classifier.predict(x_test)

print(classification_report(y_test, y_pred))
print(confusion_matrix(y_test, y_pred))

from sklearn.naive_bayes import ComplementNB
classifier = ComplementNB()
classifier.fit(x_train, y_train)

y_pred = classifier.predict(x_test)

print(classification_report(y_test, y_pred))
print(confusion_matrix(y_test, y_pred))

from sklearn.metrics import accuracy_score
print('accuracy is',accuracy_score(y_pred,y_test))

from sklearn.metrics import accuracy_score, log_loss
classifier = [ MultinomialNB(), BernoulliNB(), ComplementNB()]

log_cols=['Classifier','Accuracy','Log Loss']
log = pd.DataFrame(columns=log_cols)

for clf in classifier:
    clf.fit(x_train, y_train)
    name = clf._class.__name_
    print('='*30)
    print(name)
    print('Results')
    train_predictions = clf.predict(x_test)
    acc = accuracy_score(y_test, train_predictions)
    print('Accuracy: {:.4%}'.format(acc))
    log_entry = pd.DataFrame([[name, acc*100, 11]], columns=log_cols)
    log = log.append(log_entry)
    print("="*30)

sns.set_color_codes("muted")
sns.barplot(x='Classifier', y='Accuracy', data=log, color='green')

plt.xlabel('Classifier')
plt.ylabel('Accuracy')
plt.title('Classifier Accuracy')
plt.show()